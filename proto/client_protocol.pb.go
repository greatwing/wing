// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client_protocol.proto

package proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//协议号
type Ptl int32

const (
	Ptl_UNSPECIFIED Ptl = 0
	Ptl_Ping        Ptl = 10000
	//登录
	Ptl_LoginReq Ptl = 10001
	Ptl_LoginRsp Ptl = 10002
)

var Ptl_name = map[int32]string{
	0:     "UNSPECIFIED",
	10000: "Ping",
	10001: "LoginReq",
	10002: "LoginRsp",
}

var Ptl_value = map[string]int32{
	"UNSPECIFIED": 0,
	"Ping":        10000,
	"LoginReq":    10001,
	"LoginRsp":    10002,
}

func (x Ptl) String() string {
	return proto.EnumName(Ptl_name, int32(x))
}

func (Ptl) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3ab211d952d9c981, []int{0}
}

type Msg_LoginRsp_ErrorCode int32

const (
	Msg_LoginRsp_Succeed Msg_LoginRsp_ErrorCode = 0
)

var Msg_LoginRsp_ErrorCode_name = map[int32]string{
	0: "Succeed",
}

var Msg_LoginRsp_ErrorCode_value = map[string]int32{
	"Succeed": 0,
}

func (x Msg_LoginRsp_ErrorCode) String() string {
	return proto.EnumName(Msg_LoginRsp_ErrorCode_name, int32(x))
}

func (Msg_LoginRsp_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3ab211d952d9c981, []int{2, 0}
}

type Msg_Ping struct {
}

func (m *Msg_Ping) Reset()         { *m = Msg_Ping{} }
func (m *Msg_Ping) String() string { return proto.CompactTextString(m) }
func (*Msg_Ping) ProtoMessage()    {}
func (*Msg_Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ab211d952d9c981, []int{0}
}
func (m *Msg_Ping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Msg_Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Msg_Ping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Msg_Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg_Ping.Merge(m, src)
}
func (m *Msg_Ping) XXX_Size() int {
	return m.Size()
}
func (m *Msg_Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Msg_Ping proto.InternalMessageInfo

//登录
type Msg_LoginReq struct {
	Uid   string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *Msg_LoginReq) Reset()         { *m = Msg_LoginReq{} }
func (m *Msg_LoginReq) String() string { return proto.CompactTextString(m) }
func (*Msg_LoginReq) ProtoMessage()    {}
func (*Msg_LoginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ab211d952d9c981, []int{1}
}
func (m *Msg_LoginReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Msg_LoginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Msg_LoginReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Msg_LoginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg_LoginReq.Merge(m, src)
}
func (m *Msg_LoginReq) XXX_Size() int {
	return m.Size()
}
func (m *Msg_LoginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg_LoginReq.DiscardUnknown(m)
}

var xxx_messageInfo_Msg_LoginReq proto.InternalMessageInfo

func (m *Msg_LoginReq) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Msg_LoginReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type Msg_LoginRsp struct {
	Result  Msg_LoginRsp_ErrorCode `protobuf:"varint,1,opt,name=result,proto3,enum=proto.Msg_LoginRsp_ErrorCode" json:"result,omitempty"`
	Message string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Msg_LoginRsp) Reset()         { *m = Msg_LoginRsp{} }
func (m *Msg_LoginRsp) String() string { return proto.CompactTextString(m) }
func (*Msg_LoginRsp) ProtoMessage()    {}
func (*Msg_LoginRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ab211d952d9c981, []int{2}
}
func (m *Msg_LoginRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Msg_LoginRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Msg_LoginRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Msg_LoginRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg_LoginRsp.Merge(m, src)
}
func (m *Msg_LoginRsp) XXX_Size() int {
	return m.Size()
}
func (m *Msg_LoginRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg_LoginRsp.DiscardUnknown(m)
}

var xxx_messageInfo_Msg_LoginRsp proto.InternalMessageInfo

func (m *Msg_LoginRsp) GetResult() Msg_LoginRsp_ErrorCode {
	if m != nil {
		return m.Result
	}
	return Msg_LoginRsp_Succeed
}

func (m *Msg_LoginRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterEnum("proto.Ptl", Ptl_name, Ptl_value)
	proto.RegisterEnum("proto.Msg_LoginRsp_ErrorCode", Msg_LoginRsp_ErrorCode_name, Msg_LoginRsp_ErrorCode_value)
	proto.RegisterType((*Msg_Ping)(nil), "proto.Msg_Ping")
	proto.RegisterType((*Msg_LoginReq)(nil), "proto.Msg_LoginReq")
	proto.RegisterType((*Msg_LoginRsp)(nil), "proto.Msg_LoginRsp")
}

func init() { proto.RegisterFile("client_protocol.proto", fileDescriptor_3ab211d952d9c981) }

var fileDescriptor_3ab211d952d9c981 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0xce, 0xc9, 0x4c,
	0xcd, 0x2b, 0x89, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0x03, 0x33, 0x84, 0x58,
	0xc1, 0x94, 0x12, 0x17, 0x17, 0x87, 0x6f, 0x71, 0x7a, 0x7c, 0x40, 0x66, 0x5e, 0xba, 0x92, 0x19,
	0x17, 0x0f, 0x88, 0xed, 0x93, 0x9f, 0x9e, 0x99, 0x17, 0x94, 0x5a, 0x28, 0x24, 0xc0, 0xc5, 0x5c,
	0x9a, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0x62, 0x0a, 0x89, 0x70, 0xb1, 0x96,
	0xe4, 0x67, 0xa7, 0xe6, 0x49, 0x30, 0x81, 0xc5, 0x20, 0x1c, 0xa5, 0x4a, 0x64, 0x7d, 0xc5, 0x05,
	0x42, 0xa6, 0x5c, 0x6c, 0x45, 0xa9, 0xc5, 0xa5, 0x39, 0x25, 0x60, 0xad, 0x7c, 0x46, 0xb2, 0x10,
	0x2b, 0xf5, 0x90, 0x15, 0xe9, 0xb9, 0x16, 0x15, 0xe5, 0x17, 0x39, 0xe7, 0xa7, 0xa4, 0x06, 0x41,
	0x15, 0x0b, 0x49, 0x70, 0xb1, 0xe7, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x42, 0x8d, 0x87, 0x71,
	0x95, 0x24, 0xb8, 0x38, 0xe1, 0xca, 0x85, 0xb8, 0xb9, 0xd8, 0x83, 0x4b, 0x93, 0x93, 0x53, 0x53,
	0x53, 0x04, 0x18, 0xb4, 0x82, 0xb8, 0x98, 0x03, 0x4a, 0x72, 0x84, 0xf8, 0xb9, 0xb8, 0x43, 0xfd,
	0x82, 0x03, 0x5c, 0x9d, 0x3d, 0xdd, 0x3c, 0x5d, 0x5d, 0x04, 0x18, 0x84, 0x38, 0xb9, 0x58, 0x40,
	0x5e, 0x12, 0x98, 0xe0, 0x27, 0xc4, 0xcb, 0xc5, 0x01, 0xf3, 0x91, 0xc0, 0x44, 0x24, 0x6e, 0x71,
	0x81, 0xc0, 0x24, 0x3f, 0x25, 0x56, 0x0e, 0x46, 0x81, 0x7e, 0x3f, 0x25, 0x2e, 0x8e, 0x86, 0x06,
	0x16, 0x81, 0xff, 0xff, 0xff, 0xff, 0x67, 0x77, 0x92, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23,
	0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6,
	0x63, 0x39, 0x86, 0x24, 0x36, 0xb0, 0x3f, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x83, 0x96,
	0xdb, 0x16, 0x53, 0x01, 0x00, 0x00,
}

func (m *Msg_Ping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Msg_Ping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg_Ping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Msg_LoginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Msg_LoginReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg_LoginReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintClientProtocol(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintClientProtocol(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Msg_LoginRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Msg_LoginRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg_LoginRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintClientProtocol(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Result != 0 {
		i = encodeVarintClientProtocol(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintClientProtocol(dAtA []byte, offset int, v uint64) int {
	offset -= sovClientProtocol(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Msg_Ping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Msg_LoginReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovClientProtocol(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovClientProtocol(uint64(l))
	}
	return n
}

func (m *Msg_LoginRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovClientProtocol(uint64(m.Result))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovClientProtocol(uint64(l))
	}
	return n
}

func sovClientProtocol(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClientProtocol(x uint64) (n int) {
	return sovClientProtocol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Msg_Ping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg_Ping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg_Ping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClientProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Msg_LoginReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg_LoginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg_LoginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Msg_LoginRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg_LoginRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg_LoginRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= Msg_LoginRsp_ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClientProtocol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClientProtocol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClientProtocol
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClientProtocol
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClientProtocol
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClientProtocol        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClientProtocol          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClientProtocol = fmt.Errorf("proto: unexpected end of group")
)
